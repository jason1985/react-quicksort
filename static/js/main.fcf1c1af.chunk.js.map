{"version":3,"sources":["components/Bar.js","App.js","index.js"],"names":["Bar","height","color","className","style","backgroundColor","animations","App","useState","genNums","bars","setBars","btnRef","useRef","btnRefSort","ref","onClick","current","setAttribute","setTimeout","removeAttribute","sorted","i","length","push","console","log","quicksort","arryCp","temp","asdf","map","bar","key","arr","l","r","p","partition","j","min","max","newArray","Math","ceil","floor","random","ReactDOM","render","document","getElementById"],"mappings":"6MASeA,EATH,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACrB,OACE,qBACEC,UAAU,MACVC,MAAO,CAAEC,gBAAgB,GAAD,OAAKH,GAASD,OAAO,GAAD,OAAKA,EAAL,UCC9CK,EAAa,GAEF,SAASC,IAAO,IAAD,EACJC,mBAASC,GADL,mBACrBC,EADqB,KACfC,EADe,KAGxBC,EAASC,mBACTC,EAAaD,mBAiDjB,OACE,qCACE,2CACA,wBAAQE,IAAKD,EAAYE,QAlDd,WAGbF,EAAWG,QAAQC,aAAa,WAAY,YAC5CN,EAAOK,QAAQC,aAAa,WAAY,YACxCC,YAAW,WACTP,EAAOK,QAAQG,gBAAgB,cAC9B,KAIH,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIZ,EAAKa,OAAQD,IAC/BD,EAAOG,KAAKd,EAAKY,GAAG,IAGtBG,QAAQC,IAAI,SAAUL,GACtBM,EAAUN,EAAQ,EAAGA,EAAOE,OAAS,GAErCE,QAAQC,IAAIL,GAEZ,IAAIO,EAAM,YAAOlB,GACjBe,QAAQC,IAAI,SAAUE,GACtB,IAtBmB,eAsBVN,GACPH,YAAW,WACT,IAAIU,EAAOD,EAAOtB,EAAWgB,GAAG,IAChCM,EAAOtB,EAAWgB,GAAG,IAAMM,EAAOtB,EAAWgB,GAAG,IAChDM,EAAOtB,EAAWgB,GAAG,IAAMO,EAC3BD,EAAOtB,EAAWgB,GAAG,IAAI,IAAK,EAC9BM,EAAOtB,EAAWgB,GAAG,IAAI,IAAK,EAE9B,IAAIQ,EAAI,YAAOF,GACfjB,EAAQmB,GAERF,EAAOtB,EAAWgB,GAAG,IAAI,IAAK,EAC9BM,EAAOtB,EAAWgB,GAAG,IAAI,IAAK,IACzB,GAAJA,IAbIA,EAAI,EAAGA,EAAIhB,EAAWiB,OAAQD,IAAM,EAApCA,GAgBTX,EAAQU,IAYN,kBAGA,wBAAQN,IAAKH,EAAQI,QAZX,WACZL,EAAQF,GACRH,EAAa,GACbQ,EAAWG,QAAQG,gBAAgB,aASjC,mBAGA,qBAAKjB,UAAU,YAAf,SACGO,EAAKqB,KAAI,SAACC,EAAKC,GAAN,OACR,8BACE,cAAC,EAAD,CAAKhC,OAAQ+B,EAAI,GAAI9B,MAAO8B,EAAI,GAAK,OAAS,WADtCC,WASpB,IAAMN,EAAY,SAAZA,EAAaO,EAAKC,EAAGC,GACzB,KAAID,GAAKC,GAAT,CAEA,IAAIC,EAAIC,EAAUJ,EAAKC,EAAGC,GAE1BT,EAAUO,EAAKC,EAAGE,EAAI,GACtBV,EAAUO,EAAKG,EAAI,EAAGD,KAGlBE,EAAY,SAACJ,EAAKC,EAAGC,GAGzB,IAFA,IAAId,EAAIa,EAAI,EAEHI,EAAIJ,EAAGI,EAAIH,EAAGG,IACrB,GAAIL,EAAIK,GAAKL,EAAIE,GAAI,CACnBd,IACA,IAAIO,EAAOK,EAAIK,GACfL,EAAIK,GAAKL,EAAIZ,GACbY,EAAIZ,GAAKO,EACLP,IAAMiB,GAAGjC,EAAWkB,KAAK,CAACe,EAAGjB,GAAG,IAKxC,IAAIO,EAAOK,IADXZ,GAMA,OAJAY,EAAIZ,GAAKY,EAAIE,GACbF,EAAIE,GAAKP,EACLP,IAAMc,GAAG9B,EAAWkB,KAAK,CAACY,EAAGd,GAAG,IAE7BA,GAST,IAAMb,EAAU,WAGd,IAFA,IAPoB+B,EAAKC,EAOrBC,EAAW,GAENpB,EAAI,EAAGA,EAAI,GAAIA,IACtBoB,EAASlB,KAAK,EAVIgB,EAUU,GAVLC,EAUS,IATlCD,EAAMG,KAAKC,KAAKJ,GAChBC,EAAME,KAAKE,MAAMJ,GACVE,KAAKE,MAAMF,KAAKG,UAAYL,EAAMD,EAAM,IAAMA,IAOb,IAGxC,OAAOE,GCxHTK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fcf1c1af.chunk.js","sourcesContent":["const Bar = ({ height, color }) => {\r\n  return (\r\n    <div\r\n      className=\"bar\"\r\n      style={{ backgroundColor: `${color}`, height: `${height}px` }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import { useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport \"./App.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nlet animations = [];\r\n\r\nexport default function App() {\r\n  const [bars, setBars] = useState(genNums);\r\n\r\n  let btnRef = useRef();\r\n  let btnRefSort = useRef();\r\n\r\n  const sortIt = () => {\r\n    //disable sort for 3 seconds\r\n    //disable reset for 3 seconds\r\n    btnRefSort.current.setAttribute(\"disabled\", \"disabled\");\r\n    btnRef.current.setAttribute(\"disabled\", \"disabled\");\r\n    setTimeout(() => {\r\n      btnRef.current.removeAttribute(\"disabled\");\r\n    }, 3000);\r\n\r\n    let sorted = [];\r\n\r\n    for (let i = 0; i < bars.length; i++) {\r\n      sorted.push(bars[i][0]);\r\n    }\r\n\r\n    console.log(\"before\", sorted);\r\n    quicksort(sorted, 0, sorted.length - 1);\r\n\r\n    console.log(sorted);\r\n\r\n    let arryCp = [...bars];\r\n    console.log(\"arrcpy\", arryCp);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      setTimeout(() => {\r\n        let temp = arryCp[animations[i][0]];\r\n        arryCp[animations[i][0]] = arryCp[animations[i][1]];\r\n        arryCp[animations[i][1]] = temp;\r\n        arryCp[animations[i][0]][1] = true;\r\n        arryCp[animations[i][1]][1] = true;\r\n\r\n        let asdf = [...arryCp]; //todo: fix this\r\n        setBars(asdf);\r\n\r\n        arryCp[animations[i][0]][1] = false;\r\n        arryCp[animations[i][1]][1] = false;\r\n      }, i * 10);\r\n    }\r\n\r\n    setBars(sorted);\r\n  };\r\n\r\n  const reset = () => {\r\n    setBars(genNums);\r\n    animations = [];\r\n    btnRefSort.current.removeAttribute(\"disabled\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Quicksort</h1>\r\n      <button ref={btnRefSort} onClick={sortIt}>\r\n        sort\r\n      </button>\r\n      <button ref={btnRef} onClick={reset}>\r\n        reset\r\n      </button>\r\n      <div className=\"container\">\r\n        {bars.map((bar, key) => (\r\n          <div key={key}>\r\n            <Bar height={bar[0]} color={bar[1] ? \"blue\" : \"white\"} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst quicksort = (arr, l, r) => {\r\n  if (l >= r) return;\r\n\r\n  let p = partition(arr, l, r);\r\n\r\n  quicksort(arr, l, p - 1);\r\n  quicksort(arr, p + 1, r);\r\n};\r\n\r\nconst partition = (arr, l, r) => {\r\n  let i = l - 1;\r\n\r\n  for (let j = l; j < r; j++) {\r\n    if (arr[j] < arr[r]) {\r\n      i++;\r\n      let temp = arr[j];\r\n      arr[j] = arr[i];\r\n      arr[i] = temp;\r\n      if (i !== j) animations.push([j, i, true]);\r\n    }\r\n  }\r\n\r\n  i++;\r\n  let temp = arr[i];\r\n  arr[i] = arr[r];\r\n  arr[r] = temp;\r\n  if (i !== r) animations.push([r, i, true]);\r\n\r\n  return i;\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst genNums = () => {\r\n  let newArray = [];\r\n\r\n  for (let i = 0; i < 80; i++) {\r\n    newArray.push([getRandomInt(30, 400), false]);\r\n  }\r\n\r\n  return newArray;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}